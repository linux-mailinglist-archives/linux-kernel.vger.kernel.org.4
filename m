Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 3A4066DAFC8
	for <lists+linux-kernel@lfdr.de>; Fri,  7 Apr 2023 17:38:50 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231758AbjDGPir (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Fri, 7 Apr 2023 11:38:47 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:48224 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230140AbjDGPip (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 7 Apr 2023 11:38:45 -0400
Received: from dfw.source.kernel.org (dfw.source.kernel.org [139.178.84.217])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id ACBCD8A73;
        Fri,  7 Apr 2023 08:38:43 -0700 (PDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by dfw.source.kernel.org (Postfix) with ESMTPS id 4873464BC8;
        Fri,  7 Apr 2023 15:38:43 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id D739EC433EF;
        Fri,  7 Apr 2023 15:38:41 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=k20201202; t=1680881922;
        bh=kX8EO6zTETUVRE37+CMCYz+UhugNtYZVCG7LxiOVkPs=;
        h=Date:From:To:Cc:Subject:References:In-Reply-To:From;
        b=SfUgfB5t90kPbdSva6zhOWTwICyFqP+HQGXmFdZIoMTLKSVpo60AXtU9y0HweuzWm
         W/9r7Rhi3Gu/pH5RJNrdnef3/6XnxDgTozTH6XPoijaoeJqd3W27U4RaNZ2rtinvDr
         +/OMRTpDD6kXiTdXe9qmV7lTor6g7GvgN8V2VkdgqCdsMnsP/exkh2vwoJVuNNACqP
         VZcBUWeCzUizjaatMEfIIOBawxEWd/jqGPARHNgS5yyZVBZe0yG1c5Jbn8JEuyjrkD
         fGoM+4ZyMeXkrGtbOQasDzJkV6R6+dhAhMGNeA7SP2Fye4fTU7EqACJ35eH4mHOkIz
         W7Zx0mn8SwYMw==
Date:   Fri, 7 Apr 2023 08:41:32 -0700
From:   Bjorn Andersson <andersson@kernel.org>
To:     Souradeep Chowdhury <quic_schowdhu@quicinc.com>
Cc:     Andy Gross <agross@kernel.org>,
        Konrad Dybcio <konrad.dybcio@somainline.org>,
        Krzysztof Kozlowski <krzysztof.kozlowski+dt@linaro.org>,
        Rob Herring <robh+dt@kernel.org>,
        linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
        linux-arm-msm@vger.kernel.org, devicetree@vger.kernel.org,
        Sibi Sankar <quic_sibis@quicinc.com>,
        Rajendra Nayak <quic_rjendra@quicinc.com>
Subject: Re: [PATCH V2 2/3] soc: qcom: boot_stat: Add Driver Support for Boot
 Stats
Message-ID: <20230407154132.dpguz24f6rukyujq@ripper>
References: <cover.1680874520.git.quic_schowdhu@quicinc.com>
 <5eeeb46e9b3f61656a37cb77c2ad6a04e383c16d.1680874520.git.quic_schowdhu@quicinc.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <5eeeb46e9b3f61656a37cb77c2ad6a04e383c16d.1680874520.git.quic_schowdhu@quicinc.com>
X-Spam-Status: No, score=-5.2 required=5.0 tests=DKIMWL_WL_HIGH,DKIM_SIGNED,
        DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_HI,SPF_HELO_NONE,
        SPF_PASS autolearn=unavailable autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Apr 07, 2023 at 07:34:36PM +0530, Souradeep Chowdhury wrote:
> All of Qualcomm's proprietary Android boot-loaders capture boot time
> stats, like the time when the bootloader started execution and at what
> point the bootloader handed over control to the kernel etc. in the IMEM
> region. This information is captured in a specific format by this driver
> by mapping a structure to the IMEM memory region and then accessing the
> members of the structure to print the information. This information is
> useful in verifying if the existing boot KPIs have regressed or not.
> A sample log in SM8450(waipio) device is as follows:-
> 
> KPI: Pre ABL Time = 3s
> KPI: ABL Time = 14s

Why are these in whole seconds?

> KPI: Kernel MPM timestamp = 890206

And why is this presented in cycles?

> 
> The Module Power Manager(MPM) sleep counter starts ticking at the PBL
> stage and the timestamp generated by the sleep counter is logged by
> the Qualcomm proprietary bootloader(ABL) at two points-> First when it
> starts execution which is logged here as "Pre ABL Time" and the second
> when it is about to load the kernel logged as "ABL Time". Both are
> logged in the unit of seconds.

We have a policy to not taint the kernel log with "useless" information,
for kernel developers this seems to add no value and for end users
there's no benefit to this.

> The current kernel timestamp is
> printed by the boot_stats driver as well.
> 

Why?

> Signed-off-by: Souradeep Chowdhury <quic_schowdhu@quicinc.com>
> ---
>  drivers/soc/qcom/Kconfig      |  7 ++++
>  drivers/soc/qcom/Makefile     |  1 +
>  drivers/soc/qcom/boot_stats.c | 95 +++++++++++++++++++++++++++++++++++++++++++
>  3 files changed, 103 insertions(+)
>  create mode 100644 drivers/soc/qcom/boot_stats.c
> 
> diff --git a/drivers/soc/qcom/Kconfig b/drivers/soc/qcom/Kconfig
> index d11bda2..2cfdbb7 100644
> --- a/drivers/soc/qcom/Kconfig
> +++ b/drivers/soc/qcom/Kconfig
> @@ -79,6 +79,13 @@ config QCOM_DCC
>  	  driver provides interface to configure DCC block and read back
>  	  captured data from DCC's internal SRAM.
>  
> +config QCOM_BOOTSTAT
> +	tristate "Qualcomm Technologies, Boot Stat driver"
> +	depends on ARCH_QCOM || COMPILE_TEST
> +	help
> +	  This option enables driver for boot stats. Boot stat driver prints
> +	  the kernel bootloader information by accessing the imem region.
> +
>  config QCOM_KRYO_L2_ACCESSORS
>  	bool
>  	depends on ARCH_QCOM && ARM64 || COMPILE_TEST
> diff --git a/drivers/soc/qcom/Makefile b/drivers/soc/qcom/Makefile
> index 3b92c6c..8a9d995 100644
> --- a/drivers/soc/qcom/Makefile
> +++ b/drivers/soc/qcom/Makefile
> @@ -5,6 +5,7 @@ obj-$(CONFIG_QCOM_GENI_SE) +=	qcom-geni-se.o
>  obj-$(CONFIG_QCOM_COMMAND_DB) += cmd-db.o
>  obj-$(CONFIG_QCOM_CPR)		+= cpr.o
>  obj-$(CONFIG_QCOM_DCC) += dcc.o
> +obj-$(CONFIG_QCOM_BOOTSTAT) += boot_stats_new.o

Most other entries here are sorted alphabetically.

>  obj-$(CONFIG_QCOM_GSBI)	+=	qcom_gsbi.o
>  obj-$(CONFIG_QCOM_MDT_LOADER)	+= mdt_loader.o
>  obj-$(CONFIG_QCOM_OCMEM)	+= ocmem.o
> diff --git a/drivers/soc/qcom/boot_stats.c b/drivers/soc/qcom/boot_stats.c
> new file mode 100644
> index 0000000..080e820
> --- /dev/null
> +++ b/drivers/soc/qcom/boot_stats.c
> @@ -0,0 +1,95 @@
> +// SPDX-License-Identifier: GPL-2.0-only
> +/*
> + * Copyright (c) 2013-2019, 2021 The Linux Foundation. All rights reserved.
> + * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
> + */
> +
> +#include <linux/err.h>
> +#include <linux/io.h>
> +#include <linux/init.h>
> +#include <linux/kernel.h>
> +#include <linux/module.h>
> +#include <linux/of.h>
> +#include <linux/of_address.h>
> +#include <linux/platform_device.h>
> +
> +#define MPM_COUNTER_FREQ 32768
> +
> +/**
> + *  struct boot_stats - timestamp information related to boot stats
> + *  @bootloader_start:  Time for the starting point of the abl bootloader
> + *  @bootloader_end:    Time when the kernel starts loading from abl bootloader
> + */
> +struct boot_stats {
> +	u32 bootloader_start;
> +	u32 bootloader_end;

bootloader != abl

> +} __packed;
> +
> +struct boot_stats __iomem *boot_stats;
> +void __iomem *mpm_counter_base;

Why are these non-static global variables?

> +
> +static void print_boot_stats(void)
> +{
> +	u32 pre_abl_time = readl_relaxed(&boot_stats->bootloader_start) / MPM_COUNTER_FREQ;
> +	u32 abl_time = readl_relaxed(&boot_stats->bootloader_end) / MPM_COUNTER_FREQ;
> +
> +	pr_info("KPI: Pre ABL Time = %us\n", pre_abl_time);
> +	pr_info("KPI: ABL Time = %us\n", abl_time);
> +	pr_info("KPI: Kernel MPM timestamp = %u\n", readl_relaxed(mpm_counter_base));

This number is completely dependent on link order and other things in
happening in the kernel, so what trust do you give in this number going
up or down?

As above, why is this presented in ticks?

> +}
> +
> +static int boot_stats_probe(struct platform_device *pdev)
> +{
> +	struct device_node *np_mpm2;
> +	struct device *boot_stat = &pdev->dev;
> +
> +	boot_stats = of_iomap(boot_stat->of_node->child, 0);

You can't just do ->child here, what if boot stats isn't the first item
in the list?

> +	if (!boot_stats)
> +		return dev_err_probe(&pdev->dev, -ENOMEM,
> +					"failed to map imem region\n");
> +
> +	np_mpm2 = of_find_compatible_node(NULL, NULL,
> +					  "qcom,mpm2-sleep-counter");
> +	if (!np_mpm2) {
> +		return dev_err_probe(&pdev->dev, -EINVAL,
> +				     "failed to get the counter node\n");
> +	}
> +
> +	if (of_get_address(np_mpm2, 0, NULL, NULL)) {
> +		mpm_counter_base = of_iomap(np_mpm2, 0);

Isn't this region going to be also accessed by some sleep stats driver?

> +		if (!mpm_counter_base) {
> +			return dev_err_probe(&pdev->dev, -ENOMEM,
> +					     "failed to map the counter\n");
> +		}
> +	}
> +	print_boot_stats();

You're done with your platform_device, and your two ioremap regions
here. But you're holding on to those 10kb of memory for the rest of the
systems runtime.

> +
> +	return 0;
> +}
> +
> +static int boot_stats_remove(struct platform_device *pdev)
> +{
> +	iounmap(boot_stats);
> +	iounmap(mpm_counter_base);
> +
> +	return 0;
> +}
> +
> +static const struct of_device_id boot_stats_dt_match[] = {
> +	{ .compatible = "qcom,sm8450-imem" },

You're binding to the root imem node, rather than your boot stats child
node.

How about just exposing the boot stats imem region to userspace, through
debugfs or similar and then you can have a userspace tool that digs out
and reports this information when profiling is relevant?

Regards,
Bjorn

> +	{ }
> +};
> +MODULE_DEVICE_TABLE(of, boot_stats_dt_match);
> +
> +static struct platform_driver boot_stat_driver = {
> +	.probe  = boot_stats_probe,
> +	.remove = boot_stats_remove,
> +	.driver = {
> +		.name = "qcom-boot-stats",
> +		.of_match_table = boot_stats_dt_match,
> +	},
> +};
> +module_platform_driver(boot_stat_driver);
> +
> +MODULE_DESCRIPTION("Qualcomm Technologies Inc. Boot Stat driver");
> +MODULE_LICENSE("GPL");
> -- 
> 2.7.4
> 
