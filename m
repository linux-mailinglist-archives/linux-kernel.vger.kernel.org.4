Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 7206B655AC4
	for <lists+linux-kernel@lfdr.de>; Sat, 24 Dec 2022 17:56:21 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231191AbiLXQ4S (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Sat, 24 Dec 2022 11:56:18 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:54058 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229688AbiLXQ4O (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Sat, 24 Dec 2022 11:56:14 -0500
Received: from msg-2.mailo.com (msg-2.mailo.com [213.182.54.12])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id EBB162603;
        Sat, 24 Dec 2022 08:56:12 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=mailo.com; s=mailo;
        t=1671900963; bh=3C2JvUsacwZN7GumK7kKdnt5r4dLheWUSYF11PIXW9w=;
        h=X-EA-Auth:Date:From:To:Cc:Subject:Message-ID:MIME-Version:
         Content-Type;
        b=ggGjINSnf2Q/CriYnLlA/iPprvlC6WjH6Wt/FkK99/Y53G0FSxw1/ibA1aLHKTgsK
         UVPBKZBrXwXm/Nqau3eQH3CsD3Sn/QwvcsuAflG7swohkGXlsjCb5RPTb/iHqPyGiZ
         ZbhktDeh1d5ewav53hvbBeJKS+ZVgbvtxTpigp8A=
Received: by b-2.in.mailobj.net [192.168.90.12] with ESMTP
        via ip-206.mailobj.net [213.182.55.206]
        Sat, 24 Dec 2022 17:56:03 +0100 (CET)
X-EA-Auth: qanuojNqbxHKKlnmMrAkT89JArbMTly1Cg0TwjOlfKTX30ZqVjzUJ5YwEXDmBZyh+UamKiTd8vbOEEPYgb3JrzVBoS3zH88g
Date:   Sat, 24 Dec 2022 22:25:58 +0530
From:   Deepak R Varma <drv@mailo.com>
To:     "Maciej W. Rozycki" <macro@orcam.me.uk>,
        Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Jiri Slaby <jirislaby@kernel.org>,
        linux-serial@vger.kernel.org, linux-kernel@vger.kernel.org
Cc:     Saurabh Singh Sengar <ssengar@microsoft.com>,
        Praveen Kumar <kumarpraveen@linux.microsoft.com>,
        Deepak R Varma <drv@mailo.com>
Subject: [PATCH v2] tty: serial: zs: convert atomic_* to refcount_* APIs for
 irq_guard
Message-ID: <Y6cvHgOlkcG90j1J@qemulion>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
X-Spam-Status: No, score=-2.1 required=5.0 tests=BAYES_00,DKIM_SIGNED,
        DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,SPF_HELO_NONE,SPF_PASS
        autolearn=ham autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The refcount_* APIs are designed to address known issues with the
atomic_t APIs for reference counting. They provide following distinct
advantages:
   - protect the reference counters from overflow/underflow
   - avoid use-after-free errors
   - provide improved memory ordering guarantee schemes
   - neater and safer.
Hence, replace the atomic_* APIs by their equivalent refcount_t
API functions.

This patch proposal address the following warnings generated by
the atomic_as_refcounter.cocci coccinelle script
atomic_add_return(-1, ...)

Signed-off-by: Deepak R Varma <drv@mailo.com>
---

Changes in v2:
   1. Separate the combined change into one variable per patch as
      suggested by gregkh@linuxfoundation.org
   2. There was additional feedback on validating the change as it appeared to
      modify the existing logic. However, I found that the logic does not
      change with the proposed refcount_* APIs used in this change. Hence that
      feedback is not applied in this version.

Please Note:
   The patch is compile tested using dec_station.defconfig for MIPS architecture.

 drivers/tty/serial/zs.c | 14 +++++---------
 drivers/tty/serial/zs.h |  2 +-
 2 files changed, 6 insertions(+), 10 deletions(-)

diff --git a/drivers/tty/serial/zs.c b/drivers/tty/serial/zs.c
index 730c648e32ff..6be9933eff5c 100644
--- a/drivers/tty/serial/zs.c
+++ b/drivers/tty/serial/zs.c
@@ -753,17 +753,15 @@ static int zs_startup(struct uart_port *uport)
 	struct zs_port *zport = to_zport(uport);
 	struct zs_scc *scc = zport->scc;
 	unsigned long flags;
-	int irq_guard;
 	int ret;

-	irq_guard = atomic_add_return(1, &scc->irq_guard);
-	if (irq_guard == 1) {
+	refcount_inc(&scc->irq_guard);
+	if (refcount_read(&scc->irq_guard) == 1) {
 		ret = request_irq(zport->port.irq, zs_interrupt,
 				  IRQF_SHARED, "scc", scc);
 		if (ret) {
-			atomic_add(-1, &scc->irq_guard);
-			printk(KERN_ERR "zs: can't get irq %d\n",
-			       zport->port.irq);
+			refcount_dec(&scc->irq_guard);
+			printk(KERN_ERR "zs: can't get irq %d\n", zport->port.irq);
 			return ret;
 		}
 	}
@@ -806,7 +804,6 @@ static void zs_shutdown(struct uart_port *uport)
 	struct zs_port *zport = to_zport(uport);
 	struct zs_scc *scc = zport->scc;
 	unsigned long flags;
-	int irq_guard;

 	spin_lock_irqsave(&scc->zlock, flags);

@@ -816,8 +813,7 @@ static void zs_shutdown(struct uart_port *uport)

 	spin_unlock_irqrestore(&scc->zlock, flags);

-	irq_guard = atomic_add_return(-1, &scc->irq_guard);
-	if (!irq_guard)
+	if (refcount_dec_and_test(&scc->irq_guard))
 		free_irq(zport->port.irq, scc);
 }

diff --git a/drivers/tty/serial/zs.h b/drivers/tty/serial/zs.h
index 26ef8eafa1c1..bd97b73d7e16 100644
--- a/drivers/tty/serial/zs.h
+++ b/drivers/tty/serial/zs.h
@@ -40,7 +40,7 @@ struct zs_port {
 struct zs_scc {
 	struct zs_port	zport[2];
 	spinlock_t	zlock;
-	atomic_t	irq_guard;
+	refcount_t	irq_guard;
 	int		initialised;
 };

--
2.34.1



